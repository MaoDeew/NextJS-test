{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"../firebase/firebase\";\nvar storage = firebase.storage();\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\n\nexport function uploadFilesToFirebase(files) {\n  var promises = [];\n  var responseUpload;\n  files.forEach(function (file) {\n    var promise = new Promise(function (resolve, reject) {\n      var uploadTask = storage.ref(\"files/\".concat(file.name)).put(file);\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function (snapshot) {\n        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //console.log('Upload is ' + progress + '% done');\n      }, function (error) {\n        reject(error);\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resolve(\"File Uploaded\");\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n    });\n    promises.push(promise);\n  });\n  Promise.all(promises.map(function (promise) {\n    return promise[\"catch\"](function (e) {\n      return e;\n    });\n  })).then(function (responses) {\n    var foundError = responses.every(function (response) {\n      return response != \"File Uploaded\";\n    });\n\n    if (foundError) {\n      responses.forEach(function (response) {\n        responseUpload = {\n          code: response.code,\n          message: response.message\n        };\n      });\n    } else {\n      responseUpload = {\n        code: \"OK\",\n        message: response\n      };\n    }\n  });\n  return responseUpload;\n}","map":{"version":3,"sources":["C:/Users/mabet/Desktop/nextjs-prueba/firebase/fileupload.js"],"names":["firebase","storage","uploadFilesToFirebase","files","promises","responseUpload","forEach","file","promise","Promise","resolve","reject","uploadTask","ref","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","error","push","all","map","e","then","responses","foundError","every","response","code","message"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,IAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAT,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAqC;AACxC,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,cAAJ;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAE;AAChB,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AAC1C,UAAMC,UAAU,GAAGX,OAAO,CAACY,GAAR,iBAAqBN,IAAI,CAACO,IAA1B,GAAkCC,GAAlC,CAAsCR,IAAtC,CAAnB;AACAK,MAAAA,UAAU,CAACI,EAAX,CACIhB,QAAQ,CAACC,OAAT,CAAiBgB,SAAjB,CAA2BC,aAD/B,EAEI,UAACC,QAAD,EAAa;AACT,YAAIC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAAnE,CADS,CAET;AACH,OALL,EAMI,UAACC,KAAD,EAAU;AACRZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD,OARL,wEASI;AAAA;AAAA;AAAA;AAAA;AACGb,gBAAAA,OAAO,CAAC,eAAD,CAAP;;AADH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATJ;AAaH,KAfe,CAAhB;AAgBAN,IAAAA,QAAQ,CAACoB,IAAT,CAAchB,OAAd;AACH,GAlBD;AAoBAC,EAAAA,OAAO,CAACgB,GAAR,CAAYrB,QAAQ,CAACsB,GAAT,CAAa,UAAAlB,OAAO;AAAA,WAAIA,OAAO,SAAP,CAAc,UAAAmB,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAf,CAAJ;AAAA,GAApB,CAAZ,EACKC,IADL,CACU,UAAAC,SAAS,EAAG;AACd,QAAMC,UAAU,GAAGD,SAAS,CAACE,KAAV,CAAgB,UAAAC,QAAQ;AAAA,aAAGA,QAAQ,IAAE,eAAb;AAAA,KAAxB,CAAnB;;AACA,QAAGF,UAAH,EAAc;AACVD,MAAAA,SAAS,CAACvB,OAAV,CAAkB,UAAA0B,QAAQ,EAAG;AACzB3B,QAAAA,cAAc,GAAE;AACZ4B,UAAAA,IAAI,EAAGD,QAAQ,CAACC,IADJ;AAEZC,UAAAA,OAAO,EAAGF,QAAQ,CAACE;AAFP,SAAhB;AAIH,OALD;AAMH,KAPD,MAOK;AACD7B,MAAAA,cAAc,GAAE;AACZ4B,QAAAA,IAAI,EAAG,IADK;AAEZC,QAAAA,OAAO,EAAGF;AAFE,OAAhB;AAIH;AACJ,GAhBL;AAmBA,SAAO3B,cAAP;AACH","sourcesContent":["import firebase from \"../firebase/firebase\";\r\nconst storage = firebase.storage();\r\n\r\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\r\n\r\nexport function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    var responseUpload;\r\n    files.forEach(file=>{\r\n        const promise = new Promise((resolve,reject)=>{\r\n            const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n            uploadTask.on(\r\n                firebase.storage.TaskEvent.STATE_CHANGED,\r\n                (snapshot) =>{\r\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                    //console.log('Upload is ' + progress + '% done');\r\n                },\r\n                (error) =>{\r\n                  reject(error)\r\n                },\r\n                async () =>{\r\n                   resolve(\"File Uploaded\")\r\n                }\r\n            )\r\n        })\r\n        promises.push(promise)\r\n    })\r\n\r\n    Promise.all(promises.map(promise => promise.catch(e => e)))\r\n        .then(responses =>{\r\n            const foundError = responses.every(response=> response!=\"File Uploaded\")\r\n            if(foundError){\r\n                responses.forEach(response =>{\r\n                    responseUpload ={\r\n                        code : response.code,\r\n                        message : response.message\r\n                    }\r\n                })\r\n            }else{\r\n                responseUpload ={\r\n                    code : \"OK\",\r\n                    message : response\r\n                }\r\n            }\r\n        })\r\n    \r\n    \r\n    return responseUpload;\r\n}"]},"metadata":{},"sourceType":"module"}