{"ast":null,"code":"import firebase from \"../firebase/firebase\";\nconst storage = firebase.storage();\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\n\nexport function uploadFilesToFirebase(files) {\n  const promises = [];\n  const responseUpload = [];\n  files.forEach(file => {\n    const promise = new Promise((resolve, reject) => {\n      const uploadTask = storage.ref(`files/${file.name}`).put(file);\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {\n        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //console.log('Upload is ' + progress + '% done');\n      }, error => {\n        reject(error);\n      }, async () => {\n        resolve(\"File Uploaded\");\n      });\n    });\n    promises.push(promise);\n  });\n  Promise.all(promises.map(promise => promise.catch(e => e))).then(responses => {\n    const foundError = responses.every(response => response != \"File Uploaded\");\n\n    if (foundError) {\n      responses.forEach(response => {\n        const error = {\n          code: response.code,\n          message: response.message\n        };\n      });\n    } else {\n      const uploaded = {\n        code: \"OK\",\n        message: response\n      };\n    }\n  });\n  return responseUpload;\n}","map":{"version":3,"sources":["C:/Users/mabet/Desktop/nextjs-prueba/firebase/fileupload.js"],"names":["firebase","storage","uploadFilesToFirebase","files","promises","responseUpload","forEach","file","promise","Promise","resolve","reject","uploadTask","ref","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","error","push","all","map","catch","e","then","responses","foundError","every","response","code","message","uploaded"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,MAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAT,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAqC;AACxC,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAE;AAChB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAC1C,YAAMC,UAAU,GAAGX,OAAO,CAACY,GAAR,CAAa,SAAQN,IAAI,CAACO,IAAK,EAA/B,EAAkCC,GAAlC,CAAsCR,IAAtC,CAAnB;AACAK,MAAAA,UAAU,CAACI,EAAX,CACIhB,QAAQ,CAACC,OAAT,CAAiBgB,SAAjB,CAA2BC,aAD/B,EAEKC,QAAD,IAAa;AACT,YAAIC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAAnE,CADS,CAET;AACH,OALL,EAMKC,KAAD,IAAU;AACRZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD,OARL,EASI,YAAW;AACRb,QAAAA,OAAO,CAAC,eAAD,CAAP;AACF,OAXL;AAaH,KAfe,CAAhB;AAgBAN,IAAAA,QAAQ,CAACoB,IAAT,CAAchB,OAAd;AACH,GAlBD;AAoBAC,EAAAA,OAAO,CAACgB,GAAR,CAAYrB,QAAQ,CAACsB,GAAT,CAAalB,OAAO,IAAIA,OAAO,CAACmB,KAAR,CAAcC,CAAC,IAAIA,CAAnB,CAAxB,CAAZ,EACKC,IADL,CACUC,SAAS,IAAG;AACd,UAAMC,UAAU,GAAGD,SAAS,CAACE,KAAV,CAAgBC,QAAQ,IAAGA,QAAQ,IAAE,eAArC,CAAnB;;AACA,QAAGF,UAAH,EAAc;AACVD,MAAAA,SAAS,CAACxB,OAAV,CAAkB2B,QAAQ,IAAG;AACxB,cAAMV,KAAK,GAAE;AACVW,UAAAA,IAAI,EAAGD,QAAQ,CAACC,IADN;AAEVC,UAAAA,OAAO,EAAGF,QAAQ,CAACE;AAFT,SAAb;AAIJ,OALD;AAMH,KAPD,MAOK;AACD,YAAMC,QAAQ,GAAE;AACZF,QAAAA,IAAI,EAAG,IADK;AAEZC,QAAAA,OAAO,EAAGF;AAFE,OAAhB;AAIH;AACJ,GAhBL;AAmBA,SAAO5B,cAAP;AACH","sourcesContent":["import firebase from \"../firebase/firebase\";\r\nconst storage = firebase.storage();\r\n\r\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\r\n\r\nexport function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    const responseUpload = [];\r\n    files.forEach(file=>{\r\n        const promise = new Promise((resolve,reject)=>{\r\n            const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n            uploadTask.on(\r\n                firebase.storage.TaskEvent.STATE_CHANGED,\r\n                (snapshot) =>{\r\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                    //console.log('Upload is ' + progress + '% done');\r\n                },\r\n                (error) =>{\r\n                  reject(error)\r\n                },\r\n                async () =>{\r\n                   resolve(\"File Uploaded\")\r\n                }\r\n            )\r\n        })\r\n        promises.push(promise)\r\n    })\r\n\r\n    Promise.all(promises.map(promise => promise.catch(e => e)))\r\n        .then(responses =>{\r\n            const foundError = responses.every(response=> response!=\"File Uploaded\")\r\n            if(foundError){\r\n                responses.forEach(response =>{\r\n                     const error ={\r\n                        code : response.code,\r\n                        message : response.message\r\n                    }\r\n                })\r\n            }else{\r\n                const uploaded ={\r\n                    code : \"OK\",\r\n                    message : response\r\n                }\r\n            }\r\n        })\r\n    \r\n    \r\n    return responseUpload;\r\n}"]},"metadata":{},"sourceType":"module"}