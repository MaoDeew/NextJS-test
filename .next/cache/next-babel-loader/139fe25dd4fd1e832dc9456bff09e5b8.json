{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"../firebase/firebase\";\nvar storage = firebase.storage();\nexport function uploadFilesToFirebase(_x) {\n  return _uploadFilesToFirebase.apply(this, arguments);\n}\n\nfunction _uploadFilesToFirebase() {\n  _uploadFilesToFirebase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(files) {\n    var promises, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            promises = [];\n            files.forEach(function (file) {\n              var uploadTask = storage.ref(\"files/\".concat(file.name)).put(file);\n              uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function (snapshot) {\n                var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //console.log('Upload is ' + progress + '% done');\n              }, function (error) {\n                console.log(error);\n              }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })));\n            });\n            _context2.next = 4;\n            return Promise.allSettled(promises);\n\n          case 4:\n            result = _context2.sent;\n            console.log(result.map(function (s) {\n              return s.status;\n            }));\n            /*Promise.all(promises)\r\n            .then(() => console.log(\"All files uploaded\"))\r\n            .catch(error => console.log(error.code))*/\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _uploadFilesToFirebase.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/mabet/Desktop/nextjs-prueba/firebase/fileupload.js"],"names":["firebase","storage","uploadFilesToFirebase","files","promises","forEach","file","uploadTask","ref","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","error","console","log","Promise","allSettled","result","map","s","status"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,IAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAT,EAAhB;AAEA,gBAAsBC,qBAAtB;AAAA;AAAA;;;oFAAO,kBAAqCC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,QADH,GACc,EADd;AAEHD,YAAAA,KAAK,CAACE,OAAN,CAAc,UAAAC,IAAI,EAAG;AACjB,kBAAMC,UAAU,GAAGN,OAAO,CAACO,GAAR,iBAAqBF,IAAI,CAACG,IAA1B,GAAkCC,GAAlC,CAAsCJ,IAAtC,CAAnB;AACAC,cAAAA,UAAU,CAACI,EAAX,CACIX,QAAQ,CAACC,OAAT,CAAiBW,SAAjB,CAA2BC,aAD/B,EAEI,UAACC,QAAD,EAAa;AACT,oBAAIC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAAnE,CADS,CAET;AACH,eALL,EAMI,UAACC,KAAD,EAAU;AACRC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eARL,wEASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATJ;AAaH,aAfD;AAFG;AAAA,mBAmBkBG,OAAO,CAACC,UAAR,CAAmBlB,QAAnB,CAnBlB;;AAAA;AAmBGmB,YAAAA,MAnBH;AAoBHJ,YAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACC,GAAP,CAAW,UAAAC,CAAC;AAAA,qBAAEA,CAAC,CAACC,MAAJ;AAAA,aAAZ,CAAZ;AACA;;;;AArBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import firebase from \"../firebase/firebase\";\r\nconst storage = firebase.storage();\r\n\r\nexport async function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              console.log(error)  \r\n            },\r\n            async () =>{\r\n                //console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    const result = await Promise.allSettled(promises);\r\n    console.log(result.map(s=>s.status));\r\n    /*Promise.all(promises)\r\n    .then(() => console.log(\"All files uploaded\"))\r\n    .catch(error => console.log(error.code))*/\r\n}"]},"metadata":{},"sourceType":"module"}