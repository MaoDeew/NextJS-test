{"ast":null,"code":"import firebase from \"../firebase/firebase\";\nconst storage = firebase.storage();\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\n\nexport function uploadFilesToFirebase(files) {\n  const promises = [];\n  files.forEach(file => {\n    const promise = new Promise((resolve, reject) => {\n      const uploadTask = storage.ref(`files/${file.name}`).put(file);\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {\n        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //console.log('Upload is ' + progress + '% done');\n      }, error => {\n        reject(error);\n      }, async () => {\n        resolve(`files/${file.name} uploaded`);\n      });\n    });\n    promises.push(promise);\n  });\n  return promises;\n}","map":{"version":3,"sources":["C:/Users/mabet/Desktop/nextjs-prueba/firebase/fileupload.js"],"names":["firebase","storage","uploadFilesToFirebase","files","promises","forEach","file","promise","Promise","resolve","reject","uploadTask","ref","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","error","push"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,MAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAT,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAqC;AACxC,QAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAE;AAChB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAC1C,YAAMC,UAAU,GAAGV,OAAO,CAACW,GAAR,CAAa,SAAQN,IAAI,CAACO,IAAK,EAA/B,EAAkCC,GAAlC,CAAsCR,IAAtC,CAAnB;AACAK,MAAAA,UAAU,CAACI,EAAX,CACIf,QAAQ,CAACC,OAAT,CAAiBe,SAAjB,CAA2BC,aAD/B,EAEKC,QAAD,IAAa;AACT,YAAIC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAAnE,CADS,CAET;AACH,OALL,EAMKC,KAAD,IAAU;AACRZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD,OARL,EASI,YAAW;AACRb,QAAAA,OAAO,CAAE,SAAQH,IAAI,CAACO,IAAK,WAApB,CAAP;AACF,OAXL;AAaH,KAfe,CAAhB;AAgBAT,IAAAA,QAAQ,CAACmB,IAAT,CAAchB,OAAd;AACH,GAlBD;AAqBA,SAAOH,QAAP;AACH","sourcesContent":["import firebase from \"../firebase/firebase\";\r\nconst storage = firebase.storage();\r\n\r\n/*export function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file =>{\r\n        const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n        uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            (snapshot) =>{\r\n                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                //console.log('Upload is ' + progress + '% done');\r\n            },\r\n            (error) =>{\r\n              \r\n            },\r\n            async () =>{\r\n                console.log(`file ${file.name} uploaded`);\r\n            }\r\n        )\r\n    })\r\n\r\n    return promises;\r\n}*/\r\n\r\nexport function uploadFilesToFirebase(files){\r\n    const promises = [];\r\n    files.forEach(file=>{\r\n        const promise = new Promise((resolve,reject)=>{\r\n            const uploadTask = storage.ref(`files/${file.name}`).put(file);\r\n            uploadTask.on(\r\n                firebase.storage.TaskEvent.STATE_CHANGED,\r\n                (snapshot) =>{\r\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                    //console.log('Upload is ' + progress + '% done');\r\n                },\r\n                (error) =>{\r\n                  reject(error)\r\n                },\r\n                async () =>{\r\n                   resolve(`files/${file.name} uploaded`)\r\n                }\r\n            )\r\n        })\r\n        promises.push(promise)\r\n    })\r\n    \r\n    \r\n    return promises;\r\n}"]},"metadata":{},"sourceType":"module"}